[tox]
# if there is no setup.py
skipsdist=False

envlist = py34

# custom test configuration
pylint_opts = --disable=C0330
coverage_source = redsparrow
tests_dir = tests


[testenv]

# Onet PyPi
install_command = pip install  --pre {opts} {packages}

# use libraries from Onet PythonSDK
sitepackages = True

# if requirements.txt not generated for PythonSDK tornado, run (on PythonSDK 3.4):
#   tornadoserver -f requirements . > requirements.txt
deps =
    -rrequirements.txt
    flake8
    pylint
    pytest
    coverage
    sphinxcontrib-restbuilder

whitelist_externals =
    mkdir
    bash
    echo

#setenv =
#    PYTHONPATH = {toxinidir}/scripts

commands =
    mkdir -p '{toxinidir}/build'
    bash -c "rm -f '{toxinidir}/build/sloccount.sc'"
    bash -c "rm -f '{toxinidir}/build/*{envname}*.log'"
    bash -c "rm -f '{toxinidir}/build/*{envname}*.xml'"
    bash -c "rm -f '{toxinidir}/build/coverage*'"
    
    coverage erase
    # run tests by py.test, write result to xml for CI servers
    coverage run --source {[tox]coverage_source} -m py.test  \
        --junit-xml ./build/tests_{envname}.xml --junit-prefix {envname} {[tox]tests_dir}
    
    # coverage report for CI servers
    coverage xml -o "{toxinidir}/build/coverage_{envname}.xml"
    
    # report for command line interface
    coverage report
    
    coverage html -d '{toxinidir}/build/coverage_{envname}'
    
    bash -c "flake8 --max-complexity=10 --max-line-length=120 \
        --exclude=lib,.tox | tee '{toxinidir}/build/flake8_{envname}.log' || :"
    
    bash -c "pylint --output-format=parseable --reports=y --max-line-length=120 {[tox]pylint_opts} \
        {[tox]tests_dir} > '{toxinidir}/build/pylint_{envname}.log' 2> /dev/null || :"
    bash -c "grep rated '{toxinidir}/build/pylint_{envname}.log' || :"

